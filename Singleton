static Managers instance; // Managers 클래스의 유일한 인스턴스를 저장하는 정적 변수.
ResourceManagers _resourcemanager;
public static Managers Instance // 다른 클래스에서 Managers.Instance로 유일한 인스턴스를 가져올 수 있도록 하는 속성.
{
    get
    {
        if(instance == null) // instance가 아직 초기화되지 않았을 경우.
        {
            GameObject go = GameObject.Find("@Managers"); // 이름이 "@Managers"인 GameObject를 씬에서 찾습니다.
            if(go == null) // 만약 "@Managers"라는 이름의 GameObject가 씬에 존재하지 않을 경우.
            {
                go = new GameObject { name = "@Managers" }; // 새로운 GameObject를 생성하고, 이름을 "@Managers"로 지정합니다.
                instance = go.AddComponent<Managers>(); // 생성된 GameObject에 Managers 컴포넌트를 추가하고, instance에 할당합니다.
                DontDestroyOnLoad(go); // 이 GameObject가 씬 전환 시 파괴되지 않도록 설정합니다.
            }
            else // "@Managers"라는 이름의 GameObject가 이미 존재할 경우.
            {
                instance = go.GetComponent<Managers>(); // 해당 GameObject에서 Managers 컴포넌트를 찾아 instance에 할당합니다.
                if(instance == null) // 해당 GameObject에 Managers 컴포넌트가 없는 경우.
                {
                    instance = go.AddComponent<Managers>(); // Managers 컴포넌트를 추가하고 instance에 할당합니다.
                }
            }
        }
        return instance; // instance를 반환합니다.
    }

public static ResourceManagers Resource{get {return Instance._resourcemanager;}}
}




굳이 GameObject go를 만들어서 넣는 이유는 다음 씬으로 넘어갈 시 Destroy 되기때문에 사라지지않게 끔 만들어준다.




싱글턴패턴은 데드락과 같은 병목현상이 일어나기에 모든걸 매니저에 맡겨선 안되며 최소한으로 해야한다.